/* ========================================================================== */
/*	lcd12864.h	ASCII(English)-Only Display on Graphic LCD Module	      */
/* ========================================================================== */
/*
flash const char LOGO[1024] = {
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0x81,0xC1,
0xC1,0xC1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,
0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xE1,0xF1,0xF1,0xF1,0xF9,0xFD,0x01,0x01,0x01,0xFF,
                                                                               
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFE,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFE,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFE,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x3F,0x3F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x9F,
0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x9F,0x8F,0x8F,0x0F,0x07,0x00,0x00,0x00,0xFF,
                                                                               
0xFF,0x00,0x00,0x00,0xE0,0xF8,0xF8,0xFC,0x7C,0x3E,0x1E,0x1E,0x1E,0x1E,0x1E,0x5E,
0xDE,0xDE,0xDE,0xDE,0x9E,0x0F,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,
0xF8,0xFC,0xFC,0x3E,0x3E,0x1E,0x1E,0x1E,0x1E,0x3E,0xFC,0xFC,0xF8,0xF0,0xE0,0x00,
0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x3C,0x3C,0x3E,0x1E,0x1E,0x1E,0x3E,0xFE,
0xFC,0xFC,0xF8,0xF0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0xFF,
                                                                               
0xFF,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,
0xFF,0xFF,0xFF,0x8E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,
0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0xFF,
                                                                               
0xFF,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,
0x0F,0x07,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x0F,0x0F,0x0F,
0x0F,0x0F,0x08,0x00,0x01,0x07,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0E,0x00,0x00,0x01,
0x07,0x07,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x07,0x00,0x00,
0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x03,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x3F,0x1F,0x0F,0x03,0x00,0x00,0x00,0x00,0xFF,
                                                                               
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
0x01,0x03,0x03,0x03,0x03,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x03,0x03,
0xE3,0xE3,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
                                                                               
0xFF,0x00,0x00,0x06,0x7E,0xF8,0x00,0xFE,0x1E,0xFE,0x00,0xF8,0x7E,0x06,0x00,0x06,
0x7E,0xF8,0x00,0xFE,0x1E,0xFE,0x00,0xF8,0x7E,0x06,0x00,0x06,0x7E,0xF8,0x00,0xFE,
0x1E,0xFE,0x00,0xF8,0x7E,0x06,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x0C,0x06,0x06,
0x06,0xFE,0xFC,0x00,0x00,0x3C,0x7E,0x76,0x66,0xE6,0xEE,0xCC,0x00,0x06,0xFF,0xFF,
0x06,0x06,0x00,0xF8,0xFC,0x6E,0x66,0x66,0x6E,0x7C,0x70,0x00,0xF8,0xFC,0x0E,0x06,
0x06,0x0E,0x9C,0x98,0x00,0x00,0x00,0x00,0x00,0xF8,0xFC,0x0E,0x06,0x06,0x0E,0x9C,
0x98,0x00,0xF8,0xFC,0x0E,0x06,0x06,0x0E,0xFC,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0xFF,0x70,0x78,0xFC,0x86,0x02,0x00,0x00,0xFE,0xFE,0x04,0x06,0x06,0x00,0xFF,
                                                                               
0xFF,0x80,0x80,0x80,0x80,0x87,0x87,0x87,0x80,0x87,0x87,0x87,0x80,0x80,0x80,0x80,
0x80,0x87,0x87,0x87,0x80,0x87,0x87,0x87,0x80,0x80,0x80,0x80,0x80,0x87,0x87,0x87,
0x80,0x87,0x87,0x87,0x80,0x80,0x80,0x86,0x86,0x80,0x80,0x87,0x87,0x80,0x80,0x80,
0x80,0x87,0x87,0x80,0x80,0x83,0x87,0x86,0x86,0x86,0x87,0x83,0x80,0x80,0x83,0x87,
0x86,0x86,0x80,0x81,0x83,0x87,0x86,0x86,0x86,0x83,0x81,0x80,0x81,0x83,0x87,0x86,
0x86,0x87,0x83,0x81,0x80,0x86,0x86,0x80,0x80,0x81,0x83,0x87,0x86,0x86,0x87,0x83,
0x81,0x80,0x81,0x83,0x87,0x86,0x86,0x87,0x83,0x81,0x80,0x80,0x86,0x86,0x80,0x80,
0x87,0x87,0x80,0x80,0x81,0x87,0x86,0x80,0x80,0x87,0x87,0x80,0x80,0x80,0x80,0xFF
};
*/

const char LOGO_LAN[1024] = {
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0xE1,0xF1,0xF9,0x1D,0x01,0x81,
0x81,0xC1,0xC1,0xE1,0xE1,0xF1,0xF1,0xF1,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xFD,0xFD,
0xFD,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF1,0xF1,0xF1,0xF1,0xF1,0xF1,0xE1,0xE1,0x61,
0xC1,0xC1,0x81,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0xA1,0xB1,0x11,0x11,0x11,0x31,0x21,0x01,0x01,0xB1,0xB1,0x11,0x11,0x11,0xB1,0xA1,
0x01,0x01,0x11,0x11,0x11,0xB1,0xB1,0x11,0x11,0x01,0x01,0xB1,0xB1,0x01,0x01,0x01,
0xB1,0xB1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xB1,0xB1,0x01,0x01,
0x01,0xB1,0xB1,0x01,0x01,0x11,0x11,0x11,0x11,0x91,0xB1,0x31,0x01,0x01,0x01,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0xF0,0xFF,0xFF,0xFF,0xFF,0xFC,0xFE,0xFF,0xFF,
0xFF,0xFF,0xFF,0xDF,0xCF,0x87,0x83,0x81,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x81,
0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFE,0xFC,0xF9,0xF9,0xE3,0xC6,0x8E,0x1C,0x38,0x30,0x60,0xC0,0x80,0x00,0x00,
0x08,0x19,0x11,0x11,0x11,0x1B,0x0A,0x00,0x00,0x1B,0x1B,0x01,0x03,0x0B,0x19,0x10,
0x00,0x00,0x00,0x00,0x00,0x1B,0x1B,0x00,0x00,0x00,0x00,0x0B,0x1B,0x10,0x10,0x10,
0x1B,0x0B,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x03,0x03,0x18,
0x1B,0x03,0x00,0x00,0x00,0x00,0x1A,0x1A,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x1F,0x0F,0x0F,0x0F,0x0F,0x07,0x07,
0x07,0x06,0x00,0x00,0x80,0x80,0xC0,0x6F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF8,0xF0,0x80,0x01,0x07,0x0E,0x3C,
0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,
0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0xFC,0xFF,0x7F,0x3F,0x1F,0xFF,0xFF,0x07,0x07,0x03,0x03,0x01,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xF0,0x38,0x0E,0x03,0x03,0x01,0xC0,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0xE0,0x70,
0x31,0x1F,0x0E,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xF8,0xF8,0xFF,0x07,0x07,0x07,
0x00,0x00,0x07,0x07,0x07,0xFF,0xF8,0xF8,0xF8,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x38,
0x38,0xF8,0xC0,0xC0,0xC0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xC0,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFC,0x1F,0x01,
0x80,0xC0,0xE0,0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0x0C,0x0C,0xF6,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x0E,0x0E,0x0E,
0x0E,0x0E,0x0E,0x0E,0x0E,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,
0x00,0x01,0x01,0x01,0x0F,0x0E,0x0E,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x07,0x0F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,
0xF8,0xF8,0xF8,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF8,0xF8,0xF8,0xFF,0xFF,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x0F,0x07,0x00,0x00,0x00,0xF0,0xFF,
0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,
0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x00,0x03,0x03,0x03,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x03,0x00,0x00,0x03,0x03,0x03,0x03,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x03,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x0F,0x1F,0x1F,0x3F,0x7F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x6F,0x37,0x9F,0xCD,0xEC,0x6C,0x38,0xF8,0x80,0xF8,0x3E,0x07,0x00,
0x00,0xE8,0xE8,0x80,0x80,0x80,0xE8,0xE8,0x00,0x60,0xE8,0x88,0x88,0x88,0xA8,0x20,
0x00,0x08,0x08,0xE8,0xE8,0x08,0x08,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0x88,0x08,
0x00,0xE0,0xE8,0x08,0x08,0x08,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0xE8,0xE8,0xC0,
0x40,0x20,0x28,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0xE8,0x60,0x00,0x00,0x00,0xFF,

0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x81,0x81,0x83,0x83,0x87,0x87,0x87,0x8F,0x8F,0x8F,0x8F,0x8F,0x8F,0x9F,0x9F,
0x9F,0x9F,0x9F,0xBF,0xBF,0xBF,0xBF,0xB7,0xB7,0x97,0x9B,0x9B,0x99,0x99,0x8D,0x8C,
0x8C,0x86,0x86,0x83,0x83,0x81,0x80,0x90,0xBC,0x9F,0x8F,0x83,0x80,0x80,0x80,0x80,
0x80,0x8E,0x8E,0x80,0x80,0x80,0x8E,0x8E,0x80,0x84,0x8C,0x88,0x88,0x88,0x8E,0x86,
0x80,0x80,0x80,0x8E,0x8E,0x80,0x80,0x80,0x80,0x8E,0x8E,0x88,0x88,0x88,0x88,0x88,
0x80,0x86,0x8E,0x88,0x88,0x88,0x8C,0x84,0x80,0x8C,0x8C,0x8C,0x80,0x8E,0x8E,0x82,
0x82,0x84,0x8C,0x88,0x80,0x8E,0x8E,0x82,0x82,0x84,0x8C,0x88,0x80,0x80,0x80,0xFF



};

const char LOGO_RF4[1024] = {
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0xE1,0xF1,0xF9,0x1D,0x01,0x81,
0x81,0xC1,0xC1,0xE1,0xE1,0xF1,0xF1,0xF1,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xFD,0xFD,
0xFD,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF1,0xF1,0xF1,0xF1,0xF1,0xF1,0xE1,0xE1,0x61,
0xC1,0xC1,0x81,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0xA1,0xB1,0x11,0x11,0x11,0x31,0x21,0x01,0x01,0xB1,0xB1,0x11,0x11,0x11,0xB1,0xA1,
0x01,0x01,0x11,0x11,0x11,0xB1,0xB1,0x11,0x11,0x01,0x01,0xB1,0xB1,0x01,0x01,0x01,
0xB1,0xB1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xB1,0xB1,0x01,0x01,
0x01,0xB1,0xB1,0x01,0x01,0x11,0x11,0x11,0x11,0x91,0xB1,0x31,0x01,0x01,0x01,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0xF0,0xFF,0xFF,0xFF,0xFF,0xFC,0xFE,0xFF,0xFF,
0xFF,0xFF,0xFF,0xDF,0xCF,0x87,0x83,0x81,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x81,
0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFE,0xFC,0xF9,0xF9,0xE3,0xC6,0x8E,0x1C,0x38,0x30,0x60,0xC0,0x80,0x00,0x00,
0x08,0x19,0x11,0x11,0x11,0x1B,0x0A,0x00,0x00,0x1B,0x1B,0x01,0x03,0x0B,0x19,0x10,
0x00,0x00,0x00,0x00,0x00,0x1B,0x1B,0x00,0x00,0x00,0x00,0x0B,0x1B,0x10,0x10,0x10,
0x1B,0x0B,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x03,0x03,0x18,
0x1B,0x03,0x00,0x00,0x00,0x00,0x1A,0x1A,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x1F,0x0F,0x0F,0x0F,0x0F,0x07,0x07,
0x07,0x06,0x00,0x00,0x80,0x80,0xC0,0x6F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF8,0xF0,0x80,0x01,0x07,0x0E,0x3C,
0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,
0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0xE0,
0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0xFC,0xFF,0x7F,0x3F,0x1F,0xFF,0xFF,0x07,0x07,0x03,0x03,0x01,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xF0,0x38,0x0E,0x03,0x03,0x01,0xC0,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0xE0,0x70,
0x31,0x1F,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xC0,0xC0,0xC0,
0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x3F,0x3F,0x3F,0x00,0x00,0xFF,0xFF,0xFF,0xC0,0xC0,
0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0x38,
0x38,0x38,0x07,0x07,0x07,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xC0,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFC,0x1F,0x01,
0x80,0xC0,0xE0,0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0x0C,0x0C,0xF6,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x01,0x01,0x01,
0x0F,0x0F,0x0F,0x71,0x71,0x71,0x80,0x80,0x80,0x00,0x00,0xFF,0xFF,0xFF,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0E,
0x0E,0x0E,0x0E,0x0E,0x0E,0xFF,0xFF,0xFF,0x0E,0x0E,0x0E,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x07,0x0F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,
0xF8,0xF8,0xF8,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF8,0xF8,0xF8,0xFF,0xFF,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x0F,0x07,0x00,0x00,0x00,0xF0,0xFF,
0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x00,0x00,0x03,0x03,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x0F,0x1F,0x1F,0x3F,0x7F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x6F,0x37,0x9F,0xCD,0xEC,0x6C,0x38,0xF8,0x80,0xF8,0x3E,0x07,0x00,
0x00,0xE8,0xE8,0x80,0x80,0x80,0xE8,0xE8,0x00,0x60,0xE8,0x88,0x88,0x88,0xA8,0x20,
0x00,0x08,0x08,0xE8,0xE8,0x08,0x08,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0x88,0x08,
0x00,0xE0,0xE8,0x08,0x08,0x08,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0xE8,0xE8,0xC0,
0x40,0x20,0x28,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0xE8,0x60,0x00,0x00,0x00,0xFF,

0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x81,0x81,0x83,0x83,0x87,0x87,0x87,0x8F,0x8F,0x8F,0x8F,0x8F,0x8F,0x9F,0x9F,
0x9F,0x9F,0x9F,0xBF,0xBF,0xBF,0xBF,0xB7,0xB7,0x97,0x9B,0x9B,0x99,0x99,0x8D,0x8C,
0x8C,0x86,0x86,0x83,0x83,0x81,0x80,0x90,0xBC,0x9F,0x8F,0x83,0x80,0x80,0x80,0x80,
0x80,0x8E,0x8E,0x80,0x80,0x80,0x8E,0x8E,0x80,0x84,0x8C,0x88,0x88,0x88,0x8E,0x86,
0x80,0x80,0x80,0x8E,0x8E,0x80,0x80,0x80,0x80,0x8E,0x8E,0x88,0x88,0x88,0x88,0x88,
0x80,0x86,0x8E,0x88,0x88,0x88,0x8C,0x84,0x80,0x8C,0x8C,0x8C,0x80,0x8E,0x8E,0x82,
0x82,0x84,0x8C,0x88,0x80,0x8E,0x8E,0x82,0x82,0x84,0x8C,0x88,0x80,0x80,0x80,0xFF


};

const char LOGO_CDMA[1024] = {
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0xE1,0xF1,0xF9,0x1D,0x01,0x81,
0x81,0xC1,0xC1,0xE1,0xE1,0xF1,0xF1,0xF1,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xFD,0xFD,
0xFD,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF1,0xF1,0xF1,0xF1,0xF1,0xF1,0xE1,0xE1,0x61,
0xC1,0xC1,0x81,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0xA1,0xB1,0x11,0x11,0x11,0x31,0x21,0x01,0x01,0xB1,0xB1,0x11,0x11,0x11,0xB1,0xA1,
0x01,0x01,0x11,0x11,0x11,0xB1,0xB1,0x11,0x11,0x01,0x01,0xB1,0xB1,0x01,0x01,0x01,
0xB1,0xB1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xB1,0xB1,0x01,0x01,
0x01,0xB1,0xB1,0x01,0x01,0x11,0x11,0x11,0x11,0x91,0xB1,0x31,0x01,0x01,0x01,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0xF0,0xFF,0xFF,0xFF,0xFF,0xFC,0xFE,0xFF,0xFF,
0xFF,0xFF,0xFF,0xDF,0xCF,0x87,0x83,0x81,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x81,
0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFE,0xFC,0xF9,0xF9,0xE3,0xC6,0x8E,0x1C,0x38,0x30,0x60,0xC0,0x80,0x00,0x00,
0x08,0x19,0x11,0x11,0x11,0x1B,0x0A,0x00,0x00,0x1B,0x1B,0x01,0x03,0x0B,0x19,0x10,
0x00,0x00,0x00,0x00,0x00,0x1B,0x1B,0x00,0x00,0x00,0x00,0x0B,0x1B,0x10,0x10,0x10,
0x1B,0x0B,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x03,0x03,0x18,
0x1B,0x03,0x00,0x00,0x00,0x00,0x1A,0x1A,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x1F,0x0F,0x0F,0x0F,0x0F,0x07,0x07,
0x07,0x06,0x00,0x00,0x80,0x80,0xC0,0x6F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF8,0xF0,0x80,0x01,0x07,0x0E,0x3C,
0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0xFC,0xFF,0x7F,0x3F,0x1F,0xFF,0xFF,0x07,0x07,0x03,0x03,0x01,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xF0,0x38,0x0E,0x03,0x03,0x01,0xC0,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0xE0,0x70,
0x31,0x1F,0x0E,0x00,0x00,0xF8,0xF8,0xFB,0x03,0x03,0x03,0x03,0x03,0x03,0x1B,0x18,
0x18,0x00,0x00,0xFB,0xFB,0xFB,0x03,0x03,0x03,0x03,0x1B,0x18,0xF8,0xE0,0xE0,0x00,
0x00,0xFB,0xFB,0xFB,0x18,0x18,0xE0,0xE0,0xF8,0x18,0xFB,0xFB,0xFB,0x00,0x00,0xE0,
0xE0,0xEC,0x0C,0x0C,0x03,0x03,0x0F,0x0C,0xEC,0xE0,0xE0,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xC0,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFC,0x1F,0x01,
0x80,0xC0,0xE0,0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0x0C,0x0C,0xF6,
0xFF,0x00,0x00,0x00,0x00,0x37,0x37,0xF7,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xF0,0x30,
0x30,0x00,0x00,0xF7,0xF7,0xF7,0xC0,0xC0,0xC0,0xC0,0xF0,0x30,0x37,0x07,0x07,0x00,
0x00,0xF7,0xF7,0xF7,0x00,0x00,0x01,0x01,0x01,0x00,0xF7,0xF7,0xF7,0x00,0x00,0xF7,
0xF7,0xF7,0x06,0x06,0x06,0x06,0x06,0x06,0xF7,0xF7,0xF7,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x07,0x0F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,
0xF8,0xF8,0xF8,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF8,0xF8,0xF8,0xFF,0xFF,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x0F,0x07,0x00,0x00,0x00,0xF0,0xFF,
0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x0F,0x1F,0x1F,0x3F,0x7F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x6F,0x37,0x9F,0xCD,0xEC,0x6C,0x38,0xF8,0x80,0xF8,0x3E,0x07,0x00,
0x00,0xE8,0xE8,0x80,0x80,0x80,0xE8,0xE8,0x00,0x60,0xE8,0x88,0x88,0x88,0xA8,0x20,
0x00,0x08,0x08,0xE8,0xE8,0x08,0x08,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0x88,0x08,
0x00,0xE0,0xE8,0x08,0x08,0x08,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0xE8,0xE8,0xC0,
0x40,0x20,0x28,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0xE8,0x60,0x00,0x00,0x00,0xFF,

0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x81,0x81,0x83,0x83,0x87,0x87,0x87,0x8F,0x8F,0x8F,0x8F,0x8F,0x8F,0x9F,0x9F,
0x9F,0x9F,0x9F,0xBF,0xBF,0xBF,0xBF,0xB7,0xB7,0x97,0x9B,0x9B,0x99,0x99,0x8D,0x8C,
0x8C,0x86,0x86,0x83,0x83,0x81,0x80,0x90,0xBC,0x9F,0x8F,0x83,0x80,0x80,0x80,0x80,
0x80,0x8E,0x8E,0x80,0x80,0x80,0x8E,0x8E,0x80,0x84,0x8C,0x88,0x88,0x88,0x8E,0x86,
0x80,0x80,0x80,0x8E,0x8E,0x80,0x80,0x80,0x80,0x8E,0x8E,0x88,0x88,0x88,0x88,0x88,
0x80,0x86,0x8E,0x88,0x88,0x88,0x8C,0x84,0x80,0x8C,0x8C,0x8C,0x80,0x8E,0x8E,0x82,
0x82,0x84,0x8C,0x88,0x80,0x8E,0x8E,0x82,0x82,0x84,0x8C,0x88,0x80,0x80,0x80,0xFF



};

const char LOGO_SERVER[1024] = {
0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0xE1,0xF1,0xF9,0x1D,0x01,0x81,
0x81,0xC1,0xC1,0xE1,0xE1,0xF1,0xF1,0xF1,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xFD,0xFD,
0xFD,0xF9,0xF9,0xF9,0xF9,0xF9,0xF9,0xF1,0xF1,0xF1,0xF1,0xF1,0xF1,0xE1,0xE1,0x61,
0xC1,0xC1,0x81,0x81,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0xA1,0xB1,0x11,0x11,0x11,0x31,0x21,0x01,0x01,0xB1,0xB1,0x11,0x11,0x11,0xB1,0xA1,
0x01,0x01,0x11,0x11,0x11,0xB1,0xB1,0x11,0x11,0x01,0x01,0xB1,0xB1,0x01,0x01,0x01,
0xB1,0xB1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xB1,0xB1,0x01,0x01,
0x01,0xB1,0xB1,0x01,0x01,0x11,0x11,0x11,0x11,0x91,0xB1,0x31,0x01,0x01,0x01,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x80,0xF0,0xFF,0xFF,0xFF,0xFF,0xFC,0xFE,0xFF,0xFF,
0xFF,0xFF,0xFF,0xDF,0xCF,0x87,0x83,0x81,0x81,0x80,0x80,0x80,0x80,0x80,0x81,0x81,
0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFE,0xFC,0xF9,0xF9,0xE3,0xC6,0x8E,0x1C,0x38,0x30,0x60,0xC0,0x80,0x00,0x00,
0x08,0x19,0x11,0x11,0x11,0x1B,0x0A,0x00,0x00,0x1B,0x1B,0x01,0x03,0x0B,0x19,0x10,
0x00,0x00,0x00,0x00,0x00,0x1B,0x1B,0x00,0x00,0x00,0x00,0x0B,0x1B,0x10,0x10,0x10,
0x1B,0x0B,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x03,0x03,0x18,
0x1B,0x03,0x00,0x00,0x00,0x00,0x1A,0x1A,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x1F,0x0F,0x0F,0x0F,0x0F,0x07,0x07,
0x07,0x06,0x00,0x00,0x80,0x80,0xC0,0x6F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF8,0xF0,0x80,0x01,0x07,0x0E,0x3C,
0xF0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0xFC,0xFF,0x7F,0x3F,0x1F,0xFF,0xFF,0x07,0x07,0x03,0x03,0x01,
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xF0,0x38,0x0E,0x03,0x03,0x01,0xC0,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0xE0,0x70,
0x31,0x1F,0x0E,0x30,0x78,0xCC,0x8C,0x8C,0x8C,0x8C,0x18,0x10,0x00,0xFC,0xFC,0x8C,
0x8C,0x8C,0x8C,0x8C,0x0C,0x04,0x00,0xFC,0xFC,0x8C,0x8C,0x8C,0x8C,0x8C,0x7C,0x30,
0x00,0x3C,0x7C,0xC0,0x80,0x00,0x80,0xC0,0x7C,0x3C,0x00,0xFC,0xFC,0x8C,0x8C,0x8C,
0x8C,0x8C,0x0C,0x04,0x00,0xFC,0xFC,0x8C,0x8C,0x8C,0x8C,0x8C,0x38,0x30,0x00,0xFF,

0xFF,0x00,0x00,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xC0,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFC,0x1F,0x01,
0x80,0xC0,0xE0,0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x18,0x0C,0x0C,0xF6,
0xFF,0x00,0x00,0x04,0x0C,0x18,0x18,0x18,0x18,0x19,0x0F,0x06,0x00,0x1F,0x1F,0x18,
0x18,0x18,0x18,0x18,0x18,0x10,0x00,0x1F,0x1F,0x00,0x03,0x03,0x06,0x0C,0x18,0x10,
0x00,0x00,0x00,0x03,0x1F,0x1C,0x03,0x03,0x00,0x00,0x00,0x1F,0x1F,0x18,0x18,0x18,
0x18,0x18,0x18,0x10,0x00,0x1F,0x1F,0x00,0x03,0x07,0x04,0x0C,0x18,0x10,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x07,0x0F,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,
0xF8,0xF8,0xF8,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF8,0xF8,0xF8,0xFF,0xFF,0xFE,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x0F,0x07,0x00,0x00,0x00,0xF0,0xFF,
0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,

0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x0F,0x1F,0x1F,0x3F,0x7F,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x7F,0x6F,0x37,0x9F,0xCD,0xEC,0x6C,0x38,0xF8,0x80,0xF8,0x3E,0x07,0x00,
0x00,0xE8,0xE8,0x80,0x80,0x80,0xE8,0xE8,0x00,0x60,0xE8,0x88,0x88,0x88,0xA8,0x20,
0x00,0x08,0x08,0xE8,0xE8,0x08,0x08,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0x88,0x08,
0x00,0xE0,0xE8,0x08,0x08,0x08,0x28,0x20,0x00,0x00,0x00,0x00,0x00,0xE8,0xE8,0xC0,
0x40,0x20,0x28,0x08,0x00,0xE8,0xE8,0x88,0x88,0x88,0xE8,0x60,0x00,0x00,0x00,0xFF,

0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x81,0x81,0x83,0x83,0x87,0x87,0x87,0x8F,0x8F,0x8F,0x8F,0x8F,0x8F,0x9F,0x9F,
0x9F,0x9F,0x9F,0xBF,0xBF,0xBF,0xBF,0xB7,0xB7,0x97,0x9B,0x9B,0x99,0x99,0x8D,0x8C,
0x8C,0x86,0x86,0x83,0x83,0x81,0x80,0x90,0xBC,0x9F,0x8F,0x83,0x80,0x80,0x80,0x80,
0x80,0x8E,0x8E,0x80,0x80,0x80,0x8E,0x8E,0x80,0x84,0x8C,0x88,0x88,0x88,0x8E,0x86,
0x80,0x80,0x80,0x8E,0x8E,0x80,0x80,0x80,0x80,0x8E,0x8E,0x88,0x88,0x88,0x88,0x88,
0x80,0x86,0x8E,0x88,0x88,0x88,0x8C,0x84,0x80,0x8C,0x8C,0x8C,0x80,0x8E,0x8E,0x82,
0x82,0x84,0x8C,0x88,0x80,0x8E,0x8E,0x82,0x82,0x84,0x8C,0x88,0x80,0x80,0x80,0xFF



};

const char font[95][5] = {	/* 5x7 ASCII character font */
	{0x00, 0x00, 0x00, 0x00, 0x00},		/* 0x20 space */
	{0x00, 0x00, 0x4f, 0x00, 0x00},		/* 0x21 ! */
	{0x00, 0x07, 0x00, 0x07, 0x00},		/* 0x22 " */
	{0x14, 0x7f, 0x14, 0x7f, 0x14},		/* 0x23 # */
	{0x24, 0x2a, 0x7f, 0x2a, 0x12},		/* 0x24 $ */
	{0x23, 0x13, 0x08, 0x64, 0x62},		/* 0x25 % */
	{0x36, 0x49, 0x55, 0x22, 0x50},		/* 0x26 & */
	{0x00, 0x05, 0x03, 0x00, 0x00},		/* 0x27 ' */
	{0x00, 0x1c, 0x22, 0x41, 0x00},		/* 0x28 ( */
	{0x00, 0x41, 0x22, 0x1c, 0x00},		/* 0x29 ) */
	{0x14, 0x08, 0x3e, 0x08, 0x14},		/* 0x2a * */
	{0x08, 0x08, 0x3e, 0x08, 0x08},		/* 0x2b + */
	{0x00, 0x50, 0x30, 0x00, 0x00},		/* 0x2c , */
	{0x08, 0x08, 0x08, 0x08, 0x08},		/* 0x2d - */
	{0x00, 0x60, 0x60, 0x00, 0x00},		/* 0x2e . */
	{0x20, 0x10, 0x08, 0x04, 0x02},		/* 0x2f / */
	{0x3e, 0x51, 0x49, 0x45, 0x3e},		/* 0x30 0 */
	{0x00, 0x42, 0x7f, 0x40, 0x00},		/* 0x31 1 */
	{0x42, 0x61, 0x51, 0x49, 0x46},		/* 0x32 2 */
	{0x21, 0x41, 0x45, 0x4b, 0x31},		/* 0x33 3 */
	{0x18, 0x14, 0x12, 0x7f, 0x10},		/* 0x34 4 */
	{0x27, 0x45, 0x45, 0x45, 0x39},		/* 0x35 5 */
	{0x3c, 0x4a, 0x49, 0x49, 0x30},		/* 0x36 6 */
	{0x01, 0x71, 0x09, 0x05, 0x03},		/* 0x37 7 */
	{0x36, 0x49, 0x49, 0x49, 0x36},		/* 0x38 8 */
	{0x06, 0x49, 0x49, 0x29, 0x1e},		/* 0x39 9 */
	{0x00, 0x36, 0x36, 0x00, 0x00},		/* 0x3a : */
	{0x00, 0x56, 0x36, 0x00, 0x00},		/* 0x3b ; */
	{0x08, 0x14, 0x22, 0x41, 0x00},		/* 0x3c < */
	{0x14, 0x14, 0x14, 0x14, 0x14},		/* 0x3d = */
	{0x00, 0x41, 0x22, 0x14, 0x08},		/* 0x3e > */
	{0x02, 0x01, 0x51, 0x09, 0x06},		/* 0x3f ? */
	{0x32, 0x49, 0x79, 0x41, 0x3e},		/* 0x40 @ */
	{0x7e, 0x11, 0x11, 0x11, 0x7e},		/* 0x41 A */
	{0x7f, 0x49, 0x49, 0x49, 0x36},		/* 0x42 B */
	{0x3e, 0x41, 0x41, 0x41, 0x22},		/* 0x43 C */
	{0x7f, 0x41, 0x41, 0x22, 0x1c},		/* 0x44 D */
	{0x7f, 0x49, 0x49, 0x49, 0x41},		/* 0x45 E */
	{0x7f, 0x09, 0x09, 0x09, 0x01},		/* 0x46 F */
	{0x3e, 0x41, 0x49, 0x49, 0x7a},		/* 0x47 G */
	{0x7f, 0x08, 0x08, 0x08, 0x7f},		/* 0x48 H */
	{0x00, 0x41, 0x7f, 0x41, 0x00},		/* 0x49 I */
	{0x20, 0x40, 0x41, 0x3f, 0x01},		/* 0x4a J */
	{0x7f, 0x08, 0x14, 0x22, 0x41},		/* 0x4b K */
	{0x7f, 0x40, 0x40, 0x40, 0x40},		/* 0x4c L */
	{0x7f, 0x02, 0x0c, 0x02, 0x7f},		/* 0x4d M */
	{0x7f, 0x04, 0x08, 0x10, 0x7f},		/* 0x4e N */
	{0x3e, 0x41, 0x41, 0x41, 0x3e},		/* 0x4f O */
	{0x7f, 0x09, 0x09, 0x09, 0x06},		/* 0x50 P */
	{0x3e, 0x41, 0x51, 0x21, 0x5e},		/* 0x51 Q */
	{0x7f, 0x09, 0x19, 0x29, 0x46},		/* 0x52 R */
	{0x26, 0x49, 0x49, 0x49, 0x32},		/* 0x53 S */
	{0x01, 0x01, 0x7f, 0x01, 0x01},		/* 0x54 T */
	{0x3f, 0x40, 0x40, 0x40, 0x3f},		/* 0x55 U */
	{0x1f, 0x20, 0x40, 0x20, 0x1f},		/* 0x56 V */
	{0x3f, 0x40, 0x38, 0x40, 0x3f},		/* 0x57 W */
	{0x63, 0x14, 0x08, 0x14, 0x63},		/* 0x58 X */
	{0x07, 0x08, 0x70, 0x08, 0x07},		/* 0x59 Y */
	{0x61, 0x51, 0x49, 0x45, 0x43},		/* 0x5a Z */
	{0x00, 0x7f, 0x41, 0x41, 0x00},		/* 0x5b [ */
	{0x02, 0x04, 0x08, 0x10, 0x20},		/* 0x5c \ */
	{0x00, 0x41, 0x41, 0x7f, 0x00},		/* 0x5d ] */
/*	{0x04, 0x02, 0x01, 0x02, 0x04}, */		/* 0x5e ^ */
	{0xff, 0xff, 0xff, 0xff, 0xff},		/* 0x5e ^ */
	{0x40, 0x40, 0x40, 0x40, 0x40},		/* 0x5f _ */
	{0x00, 0x01, 0x02, 0x04, 0x00},		/* 0x60 ` */
	{0x20, 0x54, 0x54, 0x54, 0x78},		/* 0x61 a */
	{0x7f, 0x48, 0x44, 0x44, 0x38},		/* 0x62 b */
	{0x38, 0x44, 0x44, 0x44, 0x20},		/* 0x63 c */
	{0x38, 0x44, 0x44, 0x48, 0x7f},		/* 0x64 d */
	{0x38, 0x54, 0x54, 0x54, 0x18},		/* 0x65 e */
	{0x08, 0x7e, 0x09, 0x01, 0x02},		/* 0x66 f */
	{0x0c, 0x52, 0x52, 0x52, 0x3e},		/* 0x67 g */
	{0x7f, 0x08, 0x04, 0x04, 0x78},		/* 0x68 h */
	{0x00, 0x04, 0x7d, 0x00, 0x00},		/* 0x69 i */
	{0x20, 0x40, 0x44, 0x3d, 0x00},		/* 0x6a j */
	{0x7f, 0x10, 0x28, 0x44, 0x00},		/* 0x6b k */
	{0x00, 0x41, 0x7f, 0x40, 0x00},		/* 0x6c l */
	{0x7c, 0x04, 0x18, 0x04, 0x7c},		/* 0x6d m */
	{0x7c, 0x08, 0x04, 0x04, 0x78},		/* 0x6e n */
	{0x38, 0x44, 0x44, 0x44, 0x38},		/* 0x6f o */
	{0x7c, 0x14, 0x14, 0x14, 0x08},		/* 0x70 p */
	{0x08, 0x14, 0x14, 0x18, 0x7c},		/* 0x71 q */
	{0x7c, 0x08, 0x04, 0x04, 0x08},		/* 0x72 r */
	{0x48, 0x54, 0x54, 0x54, 0x20},		/* 0x73 s */
	{0x04, 0x3f, 0x44, 0x40, 0x20},		/* 0x74 t */
	{0x3c, 0x40, 0x40, 0x20, 0x7c},		/* 0x75 u */
	{0x1c, 0x20, 0x40, 0x20, 0x1c},		/* 0x76 v */
	{0x3c, 0x40, 0x30, 0x40, 0x3c},		/* 0x77 w */
	{0x44, 0x28, 0x10, 0x28, 0x44},		/* 0x78 x */
	{0x0c, 0x50, 0x50, 0x50, 0x3c},		/* 0x79 y */
	{0x44, 0x64, 0x54, 0x4c, 0x44},		/* 0x7a z */
	{0x00, 0x08, 0x36, 0x41, 0x00},		/* 0x7b { */
	{0x00, 0x00, 0x77, 0x00, 0x00},		/* 0x7c | */
	{0x00, 0x41, 0x36, 0x08, 0x00},		/* 0x7d } */
	{0x08, 0x04, 0x08, 0x10, 0x08}};	/* 0x7e ~ */

#define LCD_CS_HIGH_ACTIVE	1

char  LCD_DATA_PORT	; 
char  LCD_PORT		; 
char  LCD_DATA_DDR 	; 

char  LCD_CONT_PORT	;
char  LCD_CONT_DDR	;

char  LCD_DI		;
char  LCD_EN 		;
char  LCD_CS1		;
char  LCD_CS2		;
//#define LCD_RW		PORTB.5
//#define LCD_RES		PORTA.1
//#define LCD_BACKLIGHT	PORTB.5


#ifdef LCD_CS_HIGH_ACTIVE 
    #define LCD_CS1_ON		(LCD_CS1=1)
    #define LCD_CS1_OFF		(LCD_CS1=0)
    #define LCD_CS2_ON		(LCD_CS2=1)
    #define LCD_CS2_OFF		(LCD_CS2=0)
#else
    #define LCD_CS1_ON		(LCD_CS1=0)
    #define LCD_CS1_OFF		(LCD_CS1=1)
    #define LCD_CS2_ON		(LCD_CS2=0)
    #define LCD_CS2_OFF		(LCD_CS2=1)
#endif

#define NR  1	 
#define W2	2  	
#define CR	3  	

void put_lcd_cmd(char character);
void put_lcd_dat(char character);

unsigned char  j;
unsigned char imc;
unsigned char old_imy, imx, imy;

unsigned int pos;
unsigned char invert_flag;


#define ON	1
#define OFF	0

#define LCD_CMD		0
#define LCD_DAT		1

#define YADDR 	0xb8
#define XADDR 	0x40
#define size	0x1f   

/* ------------------------------------------------------------ */
/*	Graphic LCD Display Function	            				*/
/*	(Hyundai LCD, HG12605NY-LY,     128x64, LED backlight)		*/
/*	(Samsung SDI, UG-13B04-SEAT5-E, 128x64, E/L backlight)		*/
/* ------------------------------------------------------------ */
void LCD_cls(void);
void lcd_dly(char i);
void lcd_pos(void); 

void lcd_dly(char i) 
{                          
	while(i--) {
//	#asm("nop")
//	#asm("nop")
	}          
}
unsigned int ci;

void put_lcd_cmd(char character)	/* display a BYTE data on GLCD */
{ 	
	LCD_DI = LCD_CMD;
	LCD_PORT = character;
    lcd_dly(5);	//lcd_dly(5);
	LCD_EN = 1;
    lcd_dly(5);	//lcd_dly(5);
	LCD_EN = 0;
} 
void put_lcd_dat(char character)	/* display a BYTE data on GLCD */
{ 	
	LCD_DI = LCD_DAT;
	LCD_PORT = character;
    lcd_dly(5);	//lcd_dly(5);
	LCD_EN = 1;
    lcd_dly(5);	//lcd_dly(5);
	LCD_EN = 0;         
	lcd_pos();
}

void LCD_cls()				/* clear  screen */
{ 
	LCD_CS1_ON;    //LCD_CS1 = ON;
	LCD_CS2_ON;    //LCD_CS2 = ON;
	for(ci = 0; ci<8; ci++) { 
  		put_lcd_cmd(YADDR + ci);		/* X start address */
  		put_lcd_cmd(XADDR);			/* Y start address */
		LCD_DI = LCD_DAT;
		for(j=0; j<64; j++) {
		    lcd_dly(0);
			LCD_EN = 1;
		    lcd_dly(0);
			LCD_PORT = 0;
    		lcd_dly(0);
			LCD_EN = 0;         
    	}
	}
	LCD_CS1_OFF;    //LCD_CS1 = OFF;
	LCD_CS2_OFF;    //LCD_CS2 = OFF;
}

void LCD_initialize()				/* initialize GLCD */
{	          
	
	LCD_CONT_DDR |= 0xf0;
	//LCD_CONT_PORT = 0x00;    
//	PORTD.4 = 0;
//	PORTD.5 = 0;
//	PORTD.6 = 0;
//	PORTD.7 = 0;
    
	LCD_DATA_DDR = 0xff;
	LCD_DATA_PORT = 0x00;
	
//	LCD_BACKLIGHT = 1;	
        
//    LCD_RW = 0;
	
    LCD_CS1_OFF;    //LCD_CS1 = OFF;
    LCD_CS2_OFF;    //LCD_CS2 = OFF;
	LCD_EN = 0;         
	lcd_dly(200);
	lcd_dly(100);
	lcd_dly(100);
	LCD_CS1_ON;    //LCD_CS1 = ON;
	LCD_CS2_ON;    //LCD_CS2 = ON;
	lcd_dly(250);
  	put_lcd_cmd(0x3F);			
  	put_lcd_cmd(0xC0);			
	lcd_dly(50);
	LCD_cls();
	LCD_CS1_OFF;    //LCD_CS1 = OFF;
    LCD_CS2_OFF;    //LCD_CS2 = OFF;
}

void lcd_pos()
{               
	pos++;
	imy = pos / 128;	
	imx = pos % 128;
	if(old_imy != imy) {
		old_imy = imy;
		pos += 8;			//skip cusor position
		imy = pos/128;	
		imx = pos%128;
		
		LCD_CS1_ON;    //LCD_CS1 = ON;
		LCD_CS2_ON;    //LCD_CS2 = ON;
		put_lcd_cmd(YADDR + imy);
	} 
	if(imx == 64) {								
		LCD_CS1_OFF;
		LCD_CS2_ON;
		put_lcd_cmd(XADDR + (imx - 64));
	} else if(imx == 8) {								
		LCD_CS2_OFF;
		LCD_CS1_ON;
		put_lcd_cmd(XADDR + imx);
	}
}
#if 0
void put_str(char y_pos, char x_pos, char *string, char atr)
{

	LCD_CS1_ON;    //LCD_CS1 = ON;
	LCD_CS2_ON;    //LCD_CS2 = ON;
	
	put_lcd_cmd(YADDR + y_pos);	//y-position set L-R
	
	imx = x_pos*6;
	if(atr!=3) imx += 8;
    pos = y_pos;
	pos = (pos*128) + imx;
	
	old_imy = y_pos;    
	
	if(imx >= 64) {								
		LCD_CS1_OFF;    
		LCD_CS2_ON;     
		put_lcd_cmd(XADDR + (imx-64) );
	} else {
		LCD_CS2_OFF;    
		LCD_CS1_ON;     
		put_lcd_cmd(XADDR + imx);
	}		

    switch(atr) {
        case W2:  	
			while(*string != '\0') { 
				x_pos = *string - 0x20;
				if(*string == '.') {
					for(ci = 0; ci <= 4; ci++) {
						put_lcd_dat(font[x_pos][ci] );
					}
				} else {				
					for(ci = 0; ci <= 4; ci++) {
			        	imc = font[x_pos][ci];	
						put_lcd_dat(imc);
						put_lcd_dat(imc);
					}
					put_lcd_dat(0x00);				/* last BYTE 0x00 */
				}				
				put_lcd_dat(0x00);				/* last BYTE 0x00 */
				string++;
			}
            break;

        case 9:	// toggle  	
			for(ci=0; ci<=4; ci++) {
				#asm("nop")
				put_lcd_dat(0x40);
				#asm("nop")
				//put_lcd_dat(font[0][i]);
			}
			put_lcd_dat(0x00);				/* last BYTE 0x00 */
            break;

    	case NR:	
        default:
			while(*string != '\0') {   
				x_pos = *string - 0x20;
				for(ci = 0; ci <= 4; ci++) put_lcd_dat(font[x_pos][ci]);
				put_lcd_dat(0x00);				/* last BYTE 0x00 */
				string++;
			} 
            break;
    }    
    //LCD_CS1_OFF;    //LCD_CS1 = OFF;
	//LCD_CS2_OFF;    //LCD_CS2 = OFF;
}


#endif 

extern void put_strf(char y_pos, char x_pos, const char *string, char atr);


char *cCur   = "^";	 
char *cClr  = " ";		 

void put_sel_c(char y_pos)
{  
	unsigned char ici;
     
	if(y_pos) {      
		y_pos--;
		for(ici=0; ici<=7; ici++) {
			if (y_pos == ici)	put_str(ici,0, cCur, 3);
			else 			    put_str(ici,0, cClr, 3);
		}	
	} else {
		for(ici=0; ici<7; ici++)   put_str(ici,0, cClr, 3);
	}
}

//// //// //// //// //// //// //// ////
void GLCD_command(unsigned char signal,unsigned char command)	/* write a command on GLCD */
{         
	//LCD_RW = 0;

	signal &= 0xC0;					/* D/-I = 0 */

	if(signal & 0x80) { 
		LCD_CS2 =1;
	} else {
		LCD_CS2 = 0;
	}
	
	if(signal & 0x40) {
		LCD_CS1 = 1;
	} else {
		LCD_CS1 = 0;	
	}
	
	LCD_DI = 0;
	
	LCD_DATA_PORT = command;
	lcd_dly(1);

	LCD_EN = 1;
//	dd_time(1);
	LCD_EN = 0;
	lcd_dly(2);
}

void GLCD_data(unsigned char signal,unsigned char character)	/* display a byte data on GLCD */
{ 
	//LCD_RW = 0;

	signal &= 0xC0;	

	if(signal & 0x80) {
		LCD_CS2 = 1;
	} else {
		LCD_CS2 = 0;
	}
	
	if(signal & 0x40) {
		LCD_CS1 = 1;
	} else {
		LCD_CS1 = 0;
	}

	
	LCD_DI = 1;
	
	if (!invert_flag) LCD_DATA_PORT = character;
	else LCD_DATA_PORT = ~character;
	lcd_dly(1);
	
	LCD_EN = 1;
	lcd_dly(0);
	LCD_EN = 0;
	lcd_dly(2);
}


void display_logo_12864(unsigned char mode, unsigned char invert)
{
	unsigned char i, j, x, y;
	unsigned int im;

	x = 0xB8;
	y = 0x40;				
	im = 0;

	for(i = 0; i < 8; i++) { 
		GLCD_command(0xC0,x+i);
		GLCD_command(0xC0,y);
		for(j = 0; j < 64; j++) {
        	switch(mode) {
            	case RTU_MODE_LAN:
                    if(!invert) {            
                        GLCD_data(0x40,LOGO_LAN[im++]); 
                        GLCD_data(0x80,LOGO_LAN[im+63]);
                    } else {
                        GLCD_data(0x40,~LOGO_LAN[im++]); 
                        GLCD_data(0x80,~LOGO_LAN[im+63]);
                    }
                    break;
            	case RTU_MODE_M2M:
                    if(!invert) {            
                        GLCD_data(0x40,LOGO_RF4[im++]); 
                        GLCD_data(0x80,LOGO_RF4[im+63]);
                    } else {
                        GLCD_data(0x40,~LOGO_RF4[im++]); 
                        GLCD_data(0x80,~LOGO_RF4[im+63]);
                    }
                    break;
            	case RTU_MODE_WCDMA:
                    if(!invert) {            
                        GLCD_data(0x40,LOGO_CDMA[im++]); 
                        GLCD_data(0x80,LOGO_CDMA[im+63]);
                    } else {
                        GLCD_data(0x40,~LOGO_CDMA[im++]); 
                        GLCD_data(0x80,~LOGO_CDMA[im+63]);
                    }
                    break;
            	case RTU_MODE_LTE:
                    if(!invert) {            
                        GLCD_data(0x40,LOGO_SERVER[im++]); 
                        GLCD_data(0x80,LOGO_SERVER[im+63]);
                    } else {
                        GLCD_data(0x40,~LOGO_SERVER[im++]); 
                        GLCD_data(0x80,~LOGO_SERVER[im+63]);
                    }
                    break;
            }                    
		}
		im+=64;   
	}               
}

//char *hdMAIN   	= "HVPC  ";	//x2   
//const char *CLEAR_LINE  = "                    ";
const char *TITLE		= "HST_SRTU_V7.220419KR"; 
const char *TITLE_RF400	= "HST-SRTU_V7.220419KR"; 
                                                 
const char *TITLE_SVR	= "[HSTEC-SRTU_RF4_SVR]"; 
const char *MMC_NO_SVR  = "RF400-SERVER <->    ";

const char *MMC_NO		= "MC-NO:7001          ";
const char *LINE		= "--------------------";
const char *BLINK		= "                  ";
const char *LINE_RF400	= "==R-F--4-2-4-M-h-z==";
const char *SOLAR		= "SOLAR :000KW        ";
const char *INVERT		= "INVERT:000KW        ";
const char *DAYTOTAL	= "DAY_TOT:0000KWh     ";   
const char *WCDMA_STATUS= "CDMA-CSQ:00 ------- "; 
//const char *INVTOTAL	= "INV_TOT:000000MWh   ";        
//const char *EXT_INPUT	= "IN:0000  T:00'C,00'C";    
const char *INVTOTAL	= "INV_TOT:     0MWh   ";       
const char *EXT_INPUT	= "IN:0000  T:00'C,00'C";
//const char *EXT_INPUT	= "INV:05   T:00'C,00'C";
//const char *C_SEND		= "SEND";
const char *C_RXOK		= "RxOK";
const char *C_RXOK1		= "RxOK ";
const char *C_OFF		= "    ";
const char *C_OFF1		= "     ";
const char *INV_BLINK 	= "  ";
const char *INV_DASSTECH 	= "DS";
const char *INV_HEXPOWER 	= "HE";
const char *INV_HYUNDAI  	= "HY";
const char *INV_HYMODBUS 	= "HM";
const char *INV_LSIS	 	= "LS";
const char *INV_XENTREX	 	= "XE";
const char *INV_KACO	 	= "KA";
const char *INV_KACO39   	= "K3";   
const char *INV_KACO11   	= "K1";   
const char *INV_ABB   	 	= "AB";
const char *INV_ABB27K	 	= "A2";
const char *INV_ABB33K	 	= "A3";
const char *INV_ABB50K	 	= "A5";
const char *INV_LSIS03K  	= "L0";
const char *INV_LSIS20K	 	= "L2";
const char *INV_LSIS500K	= "L5";
const char *INV_REFUSOL	 	= "RE";
const char *INV_SANREX	 	= "SA"; 
const char *INV_DIK		 	= "DK";
const char *INV_GIFAM    	= "GF";
const char *INV_DYENP    	= "DY";
const char *INV_HYOS		= "HS";
const char *INV_EKOS    	= "EK";
const char *INV_WINDREX    	= "WR";
const char *INV_SMA10K    	= "SM";
const char *INV_DELTA     	= "DE";
const char *INV_SOLECTRIA   = "SO";
const char *INV_SUNGROW     = "SG";
const char *INV_WILLINGS    = "WI";
const char *INV_WILLINGSMBUS= "WM";
const char *INV_HANSOL3K    = "HA";
const char *INV_HEXPOWER3K 	= "H3";
const char *INV_KACO20 	= "K2";
const char *INV_HEXPOWER20K	= "H2";
const char *INV_KSTAR60K	= "KS";   

const char *INV_DYENPMBUS	= "DM";

const char *INV_HYMODBUS1M 	= "HY";
const char *INV_DYENP500K   = "D5";
const char *INV_HEXPOWERNEW = "HN";

const char *INV_HANSOL34K    = "HS";

const char *INV_HYMODBUS50K	= "HY";
const char *INV_ABB1M   	= "AM";

const char *INV_DYENPMBUS50K = "D5";

const char *INV_SSENG50K = "S5";

const char *INV_SINENG36K = "S3";
const char *INV_SINENG50K = "S5";

const char *INV_CANADIAN50K = "CN";
const char *INV_KEUMBEE34K  = "KB";

const char *INV_ABB100K     = "AB";

const char *INV_CHINTPOWER1M = "CP";
const char *INV_KSTAR500K    = "K5";
const char *INV_SOLAREDGE25K = "SE";
const char *INV_GOODWE50K    = "GW";

const char *INV_KPAM300    = "KP";                          

const char *INV_DESTINPOWER    = "DP";
const char *INV_SUNWAY100K    = "SW";
const char *INV_QCELL100K    = "QC";

const char *DS3K_STATUS			= "[DASSTECH 3K       ]"; 
const char *DS100K_STATUS		= "[DASSTECH 30-250K  ]"; 
const char *DS500K_STATUS		= "[DASSTECH 500K~~   ]"; 
const char *DS3KN_STATUS		= "[DassTechN 3K      ]"; 
const char *DS100KN_STATUS		= "[DassTechN30-250K  ]"; 
const char *DS500KN_STATUS		= "[DassTechN 500K~~  ]"; 
const char *DSN_STATUS	    	= "[DassTech New INV  ]";
const char *HE_STATUS			= "[HEXPOWER 50-250K  ]"; 
const char *HY_STATUS			= "[HYUNDAI  HPC-BUS  ]"; 
const char *HM_STATUS			= "[HYUNDAI  MODBUS   ]"; 
const char *LS03_STATUS 		= "[LSP-S0003L(KR)3K  ]";
const char *LS20_STATUS 		= "[LSIS    008-023K  ]";    
const char *LS50_STATUS 		= "[LSIS    30-50K    ]"; 
const char *LS100_STATUS		= "[LSIS    100K      ]"; 
const char *LS500_STATUS		= "[LSIS LSP-T500L    ]"; 

const char *XE_STATUS 			= "[XANTREX 100-250K  ]"; 
const char *K1_STATUS 			= "[KACO 33000XI 33K  ]"; 
const char *K3_STATUS 			= "[KACO    16-50K    ]"; 
const char *KA_STATUS 			= "[KACO    100-500K  ]"; 
const char *A2_STATUS 			= "[ABB      20-27K   ]"; 
const char *A3_STATUS 			= "[ABB-33K MODBUS    ]"; 
const char *A5_STATUS 			= "[ABB-50K MODBUS    ]"; 
const char *AB_STATUS 			= "[ABB SOLAR-MODBUS  ]"; 
const char *REFU_STATUS 		= "[REFUSol 008-023K  ]"; 
const char *SANR_STATUS 		= "[SANREX  100-250K  ]"; 
const char *DK_STATUS    		= "[DIK DPTM-30T 30K  ]";  
const char *DIK_STATUS    		= "[DIK MODBUS 30K~   ]";
const char *GIFAM_STATUS 		= "[LSIS GIFAM-115FI  ]"; 
const char *DYENP_STATUS 		= "[DYENP S5500k 5K   ]"; 
const char *HYOS_STATUS 		= "[HYOSUNG  600K     ]";   
const char *EKOS_STATUS 		= "[EKOS     100K     ]";  
const char *WINDREX_STATUS 		= "[Velts SPC-3000    ]"; 
const char *SMA10K_STATUS 		= "[SMA-WEBBOX 10K    ]"; 
const char *DELTA_STATUS 		= "[DELTA-MODBUS      ]"; 
const char *SOLECTRIA_STATUS 	= "[SOLECTRIA MODBUS  ]"; 
const char *SUNGROW3K_STATUS 	= "[SunGrow  3K-50K   ]"; 
const char *SUNGROW50K_STATUS 	= "[SunGrow  33K      ]"; 
const char *SUNGROW500K_STATUS 	= "[SunGrow  500K     ]"; 
const char *WILLINGS1M_STATUS 	= "[WILINGS-422 100K  ]";
const char *WILLINGSMBUS_STATUS_A	= "[WILINGS MODBUS-A  ]";
const char *WILLINGSMBUS_STATUS_B	= "[WILINGS MODBUS-B  ]";
const char *HANSOL3K_STATUS 	= "[HANSOL   3K       ]";
const char *HEXPOWER3K_STATUS	= "[HEXPOWER 3K       ]"; 
const char *K2_STATUS 			= "[KACO 20.0 TL3 M2  ]"; 
const char *HE20K_STATUS		= "[HEXPOWER 20K      ]"; 
const char *DE100K_STATUS		= "[DONGEIECOS 100K   ]";
const char *KSTAR60K_STATUS		= "[KSTAR 10~60K      ]"; 
const char *KSTAR100K_STATUS		= "[KSTAR   100K      ]";
const char *HYOS36K_STATUS		= "[HYOSUNG 36K       ]"; 

const char *DYENPMBUS_STATUS	= "[DYENP_MODBUS 25K  ]";

const char *HM_STATUS1M			= "[HYUNDAI 1M MODBUS ]";
const char *DYENPMBUS_STATUS500K= "[DYENP_MODBUS 500K ]";

const char *HE_NEW_STATUS		= "[HEXPOWER NEW 100K ]";

const char *HANSOL34K_STATUS 	= "[HANSOL      34K   ]";
 
const char *HM_STATUS50K		= "[HYUNDAI50K MODBUS ]";

const char *AB1M_STATUS 		= "[ABB 1M    MODBUS  ]";

const char *SUNGROW1250K_STATUS = "[SunGrow1250~1500K ]";

const char *DYENPMBUS_STATUS50K	= "[DYENP_MODBUS 50K  ]";

const char *SSENG_STATUS50K	=     "[SINGSUNG ENG 50K  ]";
const char *HYOS50K_STATUS		= "[HYOSUNG 50K-100K  ]";

const char *SINENG36K_STATUS =    "[SINENG 36K        ]";
const char *SINENG50K_STATUS =    "[SINENG 50K - 70K  ]";

const char *CANADIAN50K_STATUS =  "[CANADIAN 50K-80K  ]";
const char *KEUMBEE34K_STATUS  =  "[KEUMBEE 34K       ]";
const char *WILLINGSMBUS_STATUS_B5	= "[WILINGS MODBUS-B5 ]";

const char *SUNGROWCX_STATUS =    "[SUNGROW CX Series ]";

const char *ABB100K_STATUS =      "[ABB 100K  MODBUS  ]";

const char *CHINTPOWER1M_STATUS = "[CHINT POWER   1M  ]";
const char *KSTAR500K_STATUS =    "[KSTAR       500K  ]";
const char *SOLAREDGE25K_STATUS = "[SOLAR EDGE   25K  ]";

const char *GOODWE50K_STATUS   =  "[GOODWE   50K-80K  ]";
const char *LS1M_STATUS        =  "[LS       1M - 2M  ]";

const char *KPAM300_STATUS       =  "[K-PAM F300  V1.X  ]";

const char *HM_STATUS500K3			= "[HYUNDAI 500K3 MBUS]";
const char *HM_STATUS500K1			= "[HYUNDAI 500K1 MBUS]";

const char *SUNWAY100K_STATUS			= "[SUNWAY      100K  ]";

const char *QCELL100K_STATUS			= "[QCELL       100K  ]";
const char *QCELLMIX_STATUS			= "[QCELL       MIX   ]";

void put_head(char mode) {
	switch(mode) {
    	case RTU_MODE_LAN:
            put_strf(0,0, TITLE,1);
            put_strf(1,0, MMC_NO,1);
            put_strf(2,0, LINE,1);
            put_strf(3,0, SOLAR,1);
            put_strf(4,0, INVERT,1);  
            put_strf(5,0, DAYTOTAL,1);	
            put_strf(6,0, EXT_INPUT,1);  
            put_strf(7,0, DS100K_STATUS,1);
            break;
                       
    	case RTU_MODE_WCDMA:
            put_strf(0,0, TITLE,1);
            put_strf(1,0, MMC_NO,1);
            put_strf(2,0, LINE,1);
            put_strf(3,0, SOLAR,1);
            put_strf(4,0, INVERT,1);  
            put_strf(5,0, DAYTOTAL,1);	
            put_strf(6,0, WCDMA_STATUS,1);  
            put_strf(7,0, DS100K_STATUS,1);
			break; 
                                     
    	case RTU_MODE_M2M:
            put_strf(0,0, TITLE,1);
            put_strf(1,0, MMC_NO,1);
            put_strf(2,0, LINE,1);
            put_strf(3,0, SOLAR,1);
            put_strf(4,0, INVERT,1);  
            put_strf(5,0, DAYTOTAL,1);	
            put_strf(6,0, WCDMA_STATUS,1);  
            put_strf(7,0, DS100K_STATUS,1);
			break; 
                      
        case RTU_MODE_LTE:
            put_strf(0,0, TITLE,1);
            put_strf(1,0, MMC_NO,1);
            put_strf(2,0, LINE,1);
            put_strf(3,0, SOLAR,1);
            put_strf(4,0, INVERT,1);  
            put_strf(5,0, DAYTOTAL,1);	
            put_strf(6,0, WCDMA_STATUS,1);  
            put_strf(7,0, DS100K_STATUS,1);
			break;

        case RTU_MODE_SETUP:
            put_strf(0,0, TITLE,1);
            put_strf(1,0, MMC_NO,1);
            put_strf(2,0, LINE,1);
            put_strf(3,0, SOLAR,1);
            put_strf(4,0, INVERT,1);  
            put_strf(5,0, DAYTOTAL,1);	
            put_strf(6,0, EXT_INPUT,1);  
            put_strf(7,0, DS100K_STATUS,1);
    		break;
    }
}  

///////////////////////////////////////////////
void ClearDisplay(void) {
	LCD_cls(); 
	put_head(rtuMode);  
    
    
    switch(modelInverter) {  
    	// DASSTECH OLD (INV NO : 0 ~~ )
		case MODEL_INVERTER_DASSTECH3K:		//00
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS3K_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH100K:	//01
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS100K_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH500K:	//02
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS500K_STATUS,1);
        	break;   
                 
        // DASSTECH NEW (INV NO : 1 ~~ )    
		case MODEL_INVERTER_DASSTECH3KN:	//03
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS3KN_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH100KN:	//04
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS100KN_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH500KN:	//05
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS500KN_STATUS,1);
        	break;   
            
//	        case MODEL_INVERTER_DASSTECHNN:	//06
//			    put_str(3,16,INV_DASSTECH,2);    
//			    put_strf(7,0, DSN_STATUS,1);
//	        	break; 
             
        // HEX POWER    
		case MODEL_INVERTER_HEXPOWER3K:		//06
		    put_str(3,16,INV_HEXPOWER3K,2);    
		    put_strf(7,0, HEXPOWER3K_STATUS,1);
        	break;    
		case MODEL_INVERTER_HEXPOWER20K:	//07
		    put_str(3,16,INV_HEXPOWER20K,2);    
		    put_strf(7,0, HE20K_STATUS,1);
        	break; 
		case MODEL_INVERTER_HEXPOWER:		//08
		    put_str(3,16,INV_HEXPOWER,2);    
		    put_strf(7,0, HE_STATUS,1);
        	break;    
        
        // HYUNDAI                  
		case MODEL_INVERTER_HYUNDAI:		//09
		    put_str(3,16,INV_HYUNDAI,2);    
		    put_strf(7,0, HY_STATUS,1);
        	break;
		case MODEL_INVERTER_HYMODBUS:		//10
		    put_str(3,16,INV_HYMODBUS,2);    
		    put_strf(7,0, HM_STATUS,1);
        	break;        
                  
        //KACO                      
        case MODEL_INVERTER_KACO11:			//11
		    put_str(3,16,INV_KACO11,2);    
		    put_strf(7,0, K1_STATUS,1);
        	break;    
        case MODEL_INVERTER_KACO20:			//12
		    put_str(3,16,INV_KACO20,2);    
		    put_strf(7,0, K2_STATUS,1);
        	break;    
        case MODEL_INVERTER_KACO39:			//13
		    put_str(3,16,INV_KACO39,2);    
		    put_strf(7,0, K3_STATUS,1);
        	break;  
        case MODEL_INVERTER_KACO:			//14
		    put_str(3,16,INV_KACO,2);    
		    put_strf(7,0, KA_STATUS,1);
        	break;               
  
        // LSis                                     
        case MODEL_INVERTER_LSIS03K:		//15
		    put_str(3,16,INV_LSIS03K,2);    
		    put_strf(7,0, LS03_STATUS,1);
        	break;  //        
        case MODEL_INVERTER_LSIS20K:		//16
		    put_str(3,16,INV_LSIS20K,2);    
		    put_strf(7,0, LS20_STATUS,1);
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, Even Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud rate: 115200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x26;
//	            UBRR0H=0x00;
//	            UBRR0L=0x0B;
        	break;          
		case MODEL_INVERTER_LSIS50K:		//17
		    put_str(3,16,INV_LSIS,2); 
		    put_strf(7,0, LS50_STATUS,1);
            
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;          
		case MODEL_INVERTER_LSIS100K:		//18
		    put_str(3,16,INV_LSIS,2); 
		    put_strf(7,0, LS100_STATUS,1);
            
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;   
        case MODEL_INVERTER_LSIS500K:		//15
		    put_str(3,16,INV_LSIS500K,2);    
		    put_strf(7,0, LS500_STATUS,1);
        	break;  //                      
                           
		// A B B
        case MODEL_INVERTER_ABB27K:			//19
		    put_str(3,16,INV_ABB27K,2);
            put_strf(7,0, A2_STATUS,1);  
             
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;              
        case MODEL_INVERTER_ABB33K:			//20
		    put_str(3,16,INV_ABB33K,2);
            put_strf(7,0, A3_STATUS,1);  

            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;                            
        case MODEL_INVERTER_ABB_MODBUS:		//21
		    put_str(3,16,INV_ABB,2);
            put_strf(7,0, AB_STATUS,1);    
        	break;                  

        // H Y O S U N G     
        case MODEL_INVERTER_HYOS36K:		//22
		    put_str(3,16,INV_HYOS,2);
            put_strf(7,0, HYOS36K_STATUS,1);  
        	break;                     
		case MODEL_INVERTER_HYOS:			//23
		    put_str(3,16,INV_HYOS,2);    
		    put_strf(7,0, HYOS_STATUS,1);
        	break;          

        // R E F U S o l
        case MODEL_INVERTER_REFUSOL:		//24	
		    put_str(0,18,INV_REFUSOL,0);    
		    put_str(3,16,INV_REFUSOL,2);    
		    put_strf(7,0, REFU_STATUS,1);
        
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, Even Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud rate: 115200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x26;
//	            UBRR0H=0x00;
//	            UBRR0L=0x0B;
        	break;               
            
        // S U N - G R O W                   
        case MODEL_INVERTER_SUNGROW3K:		//25
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW3K_STATUS,1);  
        	break;        
        case MODEL_INVERTER_SUNGROW30K:		//26
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW50K_STATUS,1);  
        	break;  
        case MODEL_INVERTER_SUNGROW500K:		//26
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW500K_STATUS,1);  
        	break;  
                  
		// W I L L I N G S
        case MODEL_INVERTER_WILLINGS1M:		//27
		    put_str(3,16,INV_WILLINGS,2);    
		    put_strf(7,0, WILLINGS1M_STATUS,1);  
        	break;               
        case MODEL_INVERTER_WILLINGSMBUS_A:	//28
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_A,1);  
        	break;               
        case MODEL_INVERTER_WILLINGSMBUS_B:	//29
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_B,1);  
        	break;               
            
            
                   
        case MODEL_INVERTER_EKOS:			//30
		    put_str(3,16,INV_EKOS,2);    
		    put_strf(7,0, EKOS_STATUS,1);
            break;
            
		case MODEL_INVERTER_XANTREX:		//31
		    put_str(3,16,INV_XENTREX,2);    
		    put_strf(7,0, XE_STATUS,1);
        	break;     
                                 
        case MODEL_INVERTER_DIK:			//32
		    put_str(3,16,INV_DIK,2);    
		    put_strf(7,0, DK_STATUS,1);
        	break;         
        case MODEL_INVERTER_DIKMODBUS:		//33
		    put_str(3,16,INV_DIK,2);    
		    put_strf(7,0, DIK_STATUS,1);
        	break;   
             
        case MODEL_IMVERTER_GIFAM115FI:		//34
		    put_str(3,16,INV_GIFAM,2);    
		    put_strf(7,0, GIFAM_STATUS,1);
        	break;                  
        case MODEL_INVERTER_SANREX:			//35
		    put_str(3,16,INV_SANREX,2);    
		    put_strf(7,0, SANR_STATUS,1);
            // USART0 initialization
            // Communication Parameters: 7 Data, 1 Stop, Even Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 9600 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x24;
//	            UBRR0H=0x00;
//	            UBRR0L=0x8F;
        	break;      
        case MODEL_INVERTER_DYENP:			//36
		    put_str(3,16,INV_DYENP,2);    
		    put_strf(7,0, DYENP_STATUS,1);

            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;      
        	break;      
        case MODEL_INVERTER_WINDREX:		//37
		    put_str(3,16,INV_WINDREX,2);    
		    put_strf(7,0, WINDREX_STATUS,1);
        	break;      
        case MODEL_INVERTER_SMA10K:			//38
		    put_str(3,16,INV_SMA10K,2);    
		    put_strf(7,0, SMA10K_STATUS,1);
        	break;      
        case MODEL_INVERTER_DELTA:			//39
		    put_str(3,16,INV_DELTA,2);    
		    put_strf(7,0, DELTA_STATUS,1);  
            
            // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;             
        case MODEL_INVERTER_SOLECTRIA:		//40
		    put_str(3,16,INV_SOLECTRIA,2);    
		    put_strf(7,0, SOLECTRIA_STATUS,1);  
        	break;     
            
        //HANSOL3K_STATUS    
        case MODEL_INVERTER_HANSOL3K:		//41
		    put_str(3,16,INV_HANSOL3K,2);    
		    put_strf(7,0, HANSOL3K_STATUS,1);
          // USART0 initialization
            // Communication Parameters: 8 Data, 1 Stop, No Parity
            // USART0 Receiver: On
            // USART0 Transmitter: On
            // USART0 Mode: Asynchronous
            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;               
        	break;      
		case MODEL_INVERTER_DONGEIECOS100K:	//42
		    put_str(3,16,INV_DELTA,2);	//DE    
		    put_strf(7,0, DE100K_STATUS,1);
        	break;          
        case MODEL_INVERTER_KSTAR60K:		//43  
		    put_str(3,16,INV_KSTAR60K,2);
            put_strf(7,0, KSTAR60K_STATUS,1);  
        	break; 
//	        case MODEL_INVERTER_KSTAR100K:
//	            put_str(3,16,INV_KSTAR60K,2);
//	            put_strf(7,0, KSTAR100K_STATUS,1);  
//	        	break;              
        case MODEL_INVERTER_DYENPMBUS:		//46
		    put_str(3,16,INV_DYENPMBUS,2);
            put_strf(7,0, DYENPMBUS_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_HYMODBUS1M:      //47
            put_str(3,16,INV_HYMODBUS1M,2);
            put_strf(7,0, HM_STATUS1M,1);  
        	break;
            
        case MODEL_INVERTER_DYENPMBUS500K:		//48
		    put_str(3,16,INV_DYENP500K,2);
            put_strf(7,0, DYENPMBUS_STATUS500K,1);  
        	break;
            
        case MODEL_INVERTER_HEXPOWER_NEW:		//49
		    put_str(3,16,INV_HEXPOWERNEW,2);    
		    put_strf(7,0, HE_NEW_STATUS,1);
        	break;
        case MODEL_INVERTER_HANSOL34K:		//50
		    put_str(3,16,INV_HANSOL34K,2);    
		    put_strf(7,0, HANSOL34K_STATUS,1);
            break;
            
        case MODEL_INVERTER_HYMODBUS50K:      //51
            put_str(3,16,INV_HYMODBUS50K,2);
            put_strf(7,0, HM_STATUS50K,1);  
        	break;                     
        
        case MODEL_INVERTER_ABB_MODBUS1M:		//52
		    put_str(3,16,INV_ABB1M,2);
            put_strf(7,0, AB1M_STATUS,1);    
        	break;    
            
        case MODEL_INVERTER_SUNGROW1250K:		//53
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW1250K_STATUS,1);  
        	break; 
            
        case MODEL_INVERTER_ABB50K:		//54
		    put_str(3,16,INV_ABB50K,2);    
		    put_strf(7,0, A5_STATUS,1);               
        	
//	            UCSR0A=0x02;
//	            UCSR0B=0xD8;
//	            UCSR0C=0x06;
//	            UBRR0H=0x00;
//	            UBRR0L=0x47;
            
            break;
            
        case MODEL_INVERTER_DYENPMBUS50K:		//55
		    put_str(3,16,INV_DYENPMBUS50K,2);
            put_strf(7,0, DYENPMBUS_STATUS50K,1);  
        	break; 
            
        case MODEL_INVERTER_SSENG50K:		//56
		    put_str(3,16,INV_SSENG50K,2);
            put_strf(7,0, SSENG_STATUS50K,1);  
        	break;
            
        case MODEL_INVERTER_HYOS50K:		//57
		    put_str(3,16,INV_HYOS,2);
            put_strf(7,0, HYOS50K_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_SINENG36K:        //58
            put_str(3,16,INV_SINENG36K,2);
            put_strf(7,0, SINENG36K_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_SINENG50K:        //58
            put_str(3,16,INV_SINENG50K,2);
            put_strf(7,0, SINENG50K_STATUS,1);  
        	break;  
            
        case MODEL_INVERTER_CANADIAN50K:        //59
            put_str(3,16,INV_CANADIAN50K,2);
            put_strf(7,0, CANADIAN50K_STATUS,1);  
        	break; 
        
        case MODEL_INVERTER_KEUMBEE34K:        //60
            put_str(3,16,INV_KEUMBEE34K,2);
            put_strf(7,0, KEUMBEE34K_STATUS,1);  
        	break;  
            
        case MODEL_INVERTER_WILLINGSMBUS_B5 :     //61
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_B5,1);  
        	break; 
            
//	        case MODEL_INVERTER_SUNGROWCX:		//63
//			    put_str(3,16,INV_SUNGROW,2);    
//			    put_strf(7,0, SUNGROWCX_STATUS,1);  
//	        	break;
//	            
//	        case MODEL_INVERTER_ABB100K:		//65
//			    put_str(3,16,INV_ABB100K,2);    
//			    put_strf(7,0, ABB100K_STATUS,1); 
//	            // USART0 initialization
//	            // Communication Parameters: 8 Data, 1 Stop, No Parity
//	            // USART0 Receiver: On
//	            // USART0 Transmitter: On
//	            // USART0 Mode: Asynchronous
//	            // USART0 Baud Rate: 19200 (Double Speed Mode)
//	//	            UCSR0A=0x02;
//	//	            UCSR0B=0xD8;
//	//	            UCSR0C=0x06;
//	//	            UBRR0H=0x00;
//	//	            UBRR0L=0x47; 
//	        	break;      
//	        
//	        case MODEL_INVERTER_CHINTPOWER1M:		//63
//			    put_str(3,16,INV_CHINTPOWER1M,2);    
//			    put_strf(7,0, CHINTPOWER1M_STATUS,1);  
//	        	break;
//	            
//	        case MODEL_INVERTER_KSTAR500K:		//63
//			    put_str(3,16,INV_KSTAR500K,2);    
//			    put_strf(7,0, KSTAR500K_STATUS,1);  
//	        	break;
//	        
//	        case MODEL_INVERTER_SOLAREDGE25K:
//	            put_str(3,16,INV_SOLAREDGE25K,2);    
//			    put_strf(7,0, SOLAREDGE25K_STATUS,1);
//	            // USART0 initialization
//	            // Communication Parameters: 8 Data, 1 Stop, No Parity
//	            // USART0 Receiver: On
//	            // USART0 Transmitter: On
//	            // USART0 Mode: Asynchronous
//	            // USART0 Baud Rate: 115200 (Double Speed Mode)
//	//	            UCSR0A=0x02;
//	//	            UCSR0B=0xD8;
//	//	            UCSR0C=0x06;
//	//	            UBRR0H=0x00;
//	//	            UBRR0L=0x0B;
//	            break;
//	            
//	        case MODEL_INVERTER_GOODWE50K:
//	            put_str(3,16,INV_GOODWE50K,2);
//	            put_strf(7,0, GOODWE50K_STATUS,1);  
//	        	break; 
//	            
//	        case MODEL_INVERTER_LS1M:		//17
//			    put_str(3,16,INV_LSIS,2); 
//			    put_strf(7,0, LS1M_STATUS,1);
//	            break;       
//	        
//	        case MODEL_INVERTER_KPAM: 
//	            put_str(3,16,INV_KPAM300,2); 
//			    put_strf(7,0, KPAM300_STATUS,1);
//	            break;  
//	            
//	        case MODEL_INVERTER_HYMODBUS500K3:      //47
//	            put_str(3,16,INV_HYMODBUS1M,2);
//	            put_strf(7,0, HM_STATUS500K3,1);  
//	        	break;  
//	            
//	        case MODEL_INVERTER_HYMODBUS500K1:      //47
//	            put_str(3,16,INV_HYMODBUS1M,2);
//	            put_strf(7,0, HM_STATUS500K1,1);  
//	        	break;  
//	            
//	        case MODEL_INVERTER_SUNWAY100K:      //47
//	            put_str(3,16,INV_SUNWAY100K,2);
//	            put_strf(7,0, SUNWAY100K_STATUS,1);
//	            
//	            // USART0 initialization
//	            // Communication Parameters: 8 Data, 2 Stop, No Parity
//	            // USART0 Receiver: On
//	            // USART0 Transmitter: On
//	            // USART0 Mode: Asynchronous
//	            // USART0 Baud Rate: 38400 (Double Speed Mode)
//	            
//	//	            UCSR0A=0x02;
//	//	            UCSR0B=0xD8;
//	//	            UCSR0C=0x0E;
//	//	            UBRR0H=0x00;
//	//	            UBRR0L=0x23;  
//	        	break; 
//	            
//	        case MODEL_INVERTER_QCELL100K:      //47
//	            put_str(3,16,INV_QCELL100K,2);
//	            put_strf(7,0, QCELL100K_STATUS,1);  
//	        	break;
//	        case MODEL_INVERTER_QCELLMIX:      //47
//	            put_str(3,16,INV_QCELL100K,2);
//	            put_strf(7,0, QCELLMIX_STATUS,1);  
//	        	break;   
			default:
				break;

    }        

    sprintf(str,"%04d", eePortNumber);
	put_str(1,6,str,2);        
    sprintf(str,"%2d", eeInverterCount);
    put_str(7,18,str,1);                    
    
}


void InverterDisplay(char sel) {
    switch(sel) {  
    	// DASSTECH OLD (INV NO : 0 ~~ )
		case MODEL_INVERTER_DASSTECH3K:		//00
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS3K_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH100K:	//01
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS100K_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH500K:	//02
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS500K_STATUS,1);
        	break;   
                 
        // DASSTECH NEW (INV NO : 1 ~~ )    
		case MODEL_INVERTER_DASSTECH3KN:	//03
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS3KN_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH100KN:	//04
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS100KN_STATUS,1);
        	break;
		case MODEL_INVERTER_DASSTECH500KN:	//05
		    put_str(3,16,INV_DASSTECH,2);    
		    put_strf(7,0, DS500KN_STATUS,1);
        	break;  
            
//	        case MODEL_INVERTER_DASSTECHNN:	//05
//			    put_str(3,16,INV_DASSTECH,2);    
//			    put_strf(7,0, DSN_STATUS,1);
//	        	break;
             
        // HEX POWER    
		case MODEL_INVERTER_HEXPOWER3K:		//06
		    put_str(3,16,INV_HEXPOWER3K,2);    
		    put_strf(7,0, HEXPOWER3K_STATUS,1);
        	break;    
		case MODEL_INVERTER_HEXPOWER20K:	//07
		    put_str(3,16,INV_HEXPOWER20K,2);    
		    put_strf(7,0, HE20K_STATUS,1);
        	break; 
		case MODEL_INVERTER_HEXPOWER:		//08
		    put_str(3,16,INV_HEXPOWER,2);    
		    put_strf(7,0, HE_STATUS,1);
        	break;    
        
        // HYUNDAI                  
		case MODEL_INVERTER_HYUNDAI:		//09
		    put_str(3,16,INV_HYUNDAI,2);    
		    put_strf(7,0, HY_STATUS,1);
        	break;
		case MODEL_INVERTER_HYMODBUS:		//10
		    put_str(3,16,INV_HYMODBUS,2);    
		    put_strf(7,0, HM_STATUS,1);
        	break;        
                  
        //KACO                      
        case MODEL_INVERTER_KACO11:			//11
		    put_str(3,16,INV_KACO11,2);    
		    put_strf(7,0, K1_STATUS,1);
        	break;    
        case MODEL_INVERTER_KACO20:			//12
		    put_str(3,16,INV_KACO20,2);    
		    put_strf(7,0, K2_STATUS,1);
        	break;    
        case MODEL_INVERTER_KACO39:			//13
		    put_str(3,16,INV_KACO39,2);    
		    put_strf(7,0, K3_STATUS,1);
        	break;  
        case MODEL_INVERTER_KACO:			//14
		    put_str(3,16,INV_KACO,2);    
		    put_strf(7,0, KA_STATUS,1);
        	break;               
  
        // LSis                                     
        case MODEL_INVERTER_LSIS03K:		//15
		    put_str(3,16,INV_LSIS03K,2);    
		    put_strf(7,0, LS03_STATUS,1);
        	break;  //        
        case MODEL_INVERTER_LSIS20K:		//16
		    put_str(3,16,INV_LSIS20K,2);    
		    put_strf(7,0, LS20_STATUS,1);
        	break;          
		case MODEL_INVERTER_LSIS50K:		//17
		    put_str(3,16,INV_LSIS,2); 
		    put_strf(7,0, LS50_STATUS,1);
        	break;          
		case MODEL_INVERTER_LSIS100K:		//18
		    put_str(3,16,INV_LSIS,2); 
		    put_strf(7,0, LS100_STATUS,1);
        	break;
        case MODEL_INVERTER_LSIS500K:		//15
		    put_str(3,16,INV_LSIS500K,2);    
		    put_strf(7,0, LS500_STATUS,1);
        	break;  //                                       
                           
		// A B B
        case MODEL_INVERTER_ABB27K:			//19
		    put_str(3,16,INV_ABB27K,2);
            put_strf(7,0, A2_STATUS,1);  
        	break;              
        case MODEL_INVERTER_ABB33K:			//20
		    put_str(3,16,INV_ABB33K,2);
            put_strf(7,0, A3_STATUS,1);  
        	break;                            
        case MODEL_INVERTER_ABB_MODBUS:		//21
		    put_str(3,16,INV_ABB,2);
            put_strf(7,0, AB_STATUS,1);    
        	break;                  

        // H Y O S U N G     
        case MODEL_INVERTER_HYOS36K:		//22
		    put_str(3,16,INV_HYOS,2);
            put_strf(7,0, HYOS36K_STATUS,1);  
        	break;                     
		case MODEL_INVERTER_HYOS:			//23
		    put_str(3,16,INV_HYOS,2);    
		    put_strf(7,0, HYOS_STATUS,1);
        	break;          

        // R E F U S o l
        case MODEL_INVERTER_REFUSOL:		//24	
		    put_str(0,18,INV_REFUSOL,0);    
		    put_str(3,16,INV_REFUSOL,2);    
		    put_strf(7,0, REFU_STATUS,1);
        	break;               
            
        // S U N - G R O W                   
        case MODEL_INVERTER_SUNGROW3K:		//25
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW3K_STATUS,1);  
        	break;        
        case MODEL_INVERTER_SUNGROW30K:		//26
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW50K_STATUS,1);  
        	break;  
        case MODEL_INVERTER_SUNGROW500K:		//26
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW500K_STATUS,1);  
        	break;  
                  
		// W I L L I N G S
        case MODEL_INVERTER_WILLINGS1M:		//27
		    put_str(3,16,INV_WILLINGS,2);    
		    put_strf(7,0, WILLINGS1M_STATUS,1);  
        	break;               
        case MODEL_INVERTER_WILLINGSMBUS_A:	//28
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_A,1);  
        	break;               
        case MODEL_INVERTER_WILLINGSMBUS_B:	//29
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_B,1);  
        	break;               
            
            
                   
        case MODEL_INVERTER_EKOS:			//30
		    put_str(3,16,INV_EKOS,2);    
		    put_strf(7,0, EKOS_STATUS,1);
            break;
		case MODEL_INVERTER_XANTREX:		//31
		    put_str(3,16,INV_XENTREX,2);    
		    put_strf(7,0, XE_STATUS,1);
        	break;     
                                 
        case MODEL_INVERTER_DIK:			//32
		    put_str(3,16,INV_DIK,2);    
		    put_strf(7,0, DK_STATUS,1);
        	break;         
        case MODEL_INVERTER_DIKMODBUS:		//33
		    put_str(3,16,INV_DIK,2);    
		    put_strf(7,0, DIK_STATUS,1);
        	break;   
             
        case MODEL_IMVERTER_GIFAM115FI:		//34
		    put_str(3,16,INV_GIFAM,2);    
		    put_strf(7,0, GIFAM_STATUS,1);
        	break;                  
        case MODEL_INVERTER_SANREX:			//35
		    put_str(3,16,INV_SANREX,2);    
		    put_strf(7,0, SANR_STATUS,1);
        	break;      
        case MODEL_INVERTER_DYENP:			//36
		    put_str(3,16,INV_DYENP,2);    
		    put_strf(7,0, DYENP_STATUS,1);
        	break;      
        	break;      
        case MODEL_INVERTER_WINDREX:		//37
		    put_str(3,16,INV_WINDREX,2);    
		    put_strf(7,0, WINDREX_STATUS,1);
        	break;      
        case MODEL_INVERTER_SMA10K:			//38
		    put_str(3,16,INV_SMA10K,2);    
		    put_strf(7,0, SMA10K_STATUS,1);
        	break;      
        case MODEL_INVERTER_DELTA:			//39
		    put_str(3,16,INV_DELTA,2);    
		    put_strf(7,0, DELTA_STATUS,1);  
        	break;             
        case MODEL_INVERTER_SOLECTRIA:		//40
		    put_str(3,16,INV_SOLECTRIA,2);    
		    put_strf(7,0, SOLECTRIA_STATUS,1);  
        	break;     
            
        //HANSOL3K_STATUS    
        case MODEL_INVERTER_HANSOL3K:		//41
		    put_str(3,16,INV_HANSOL3K,2);    
		    put_strf(7,0, HANSOL3K_STATUS,1);
        	break;      
		case MODEL_INVERTER_DONGEIECOS100K:	//42
		    put_str(3,16,INV_DELTA,2);	//DE    
		    put_strf(7,0, DE100K_STATUS,1);
        	break;          
        case MODEL_INVERTER_KSTAR60K:		//43   
		    put_str(3,16,INV_KSTAR60K,2);
            put_strf(7,0, KSTAR60K_STATUS,1);  
        	break;
//	        case MODEL_INVERTER_KSTAR100K:
//	            put_str(3,16,INV_KSTAR60K,2);
//	            put_strf(7,0, KSTAR100K_STATUS,1);  
//	        	break;                   
        case MODEL_INVERTER_DYENPMBUS:		//45
		    put_str(3,16,INV_DYENPMBUS,2);
            put_strf(7,0, DYENPMBUS_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_HYMODBUS1M:     //47
            put_str(3,16,INV_HYMODBUS1M,2);
            put_strf(7,0, HM_STATUS1M,1);  
        	break;
            
        case MODEL_INVERTER_DYENPMBUS500K:		//48
		    put_str(3,16,INV_DYENP500K,2);
            put_strf(7,0, DYENPMBUS_STATUS500K,1);  
        	break;     
            
        case MODEL_INVERTER_HEXPOWER_NEW:		//49
		    put_str(3,16,INV_HEXPOWERNEW,2);    
		    put_strf(7,0, HE_NEW_STATUS,1);
        	break;
            
        case MODEL_INVERTER_HANSOL34K:		//50
		    put_str(3,16,INV_HANSOL34K,2);    
		    put_strf(7,0, HANSOL34K_STATUS,1);
            break;
            
        case MODEL_INVERTER_HYMODBUS50K:      //51
            put_str(3,16,INV_HYMODBUS50K,2);
            put_strf(7,0, HM_STATUS50K,1);  
        	break;
            
        case MODEL_INVERTER_ABB_MODBUS1M:		//52
		    put_str(3,16,INV_ABB1M,2);
            put_strf(7,0, AB1M_STATUS,1);    
        	break;    
            
        case MODEL_INVERTER_SUNGROW1250K:		//53
		    put_str(3,16,INV_SUNGROW,2);    
		    put_strf(7,0, SUNGROW1250K_STATUS,1);  
        	break; 
            
        case MODEL_INVERTER_ABB50K:		//54
		    put_str(3,16,INV_ABB50K,2);    
		    put_strf(7,0, A5_STATUS,1);  
        	break; 
            
        case MODEL_INVERTER_DYENPMBUS50K:		//55
		    put_str(3,16,INV_DYENPMBUS50K,2);
            put_strf(7,0, DYENPMBUS_STATUS50K,1);  
        	break;
            
        case MODEL_INVERTER_SSENG50K:		//56
		    put_str(3,16,INV_SSENG50K,2);
            put_strf(7,0, SSENG_STATUS50K,1);  
        	break;  
            
        case MODEL_INVERTER_HYOS50K:		//57
		    put_str(3,16,INV_HYOS,2);
            put_strf(7,0, HYOS50K_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_SINENG36K:        //58
            put_str(3,16,INV_SINENG36K,2);
            put_strf(7,0, SINENG36K_STATUS,1);  
        	break;
        case MODEL_INVERTER_SINENG50K:        //58
            put_str(3,16,INV_SINENG50K,2);
            put_strf(7,0, SINENG50K_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_CANADIAN50K:        //59
            put_str(3,16,INV_CANADIAN50K,2);
            put_strf(7,0, CANADIAN50K_STATUS,1);  
        	break;
            
        case MODEL_INVERTER_KEUMBEE34K:        //60
            put_str(3,16,INV_KEUMBEE34K,2);
            put_strf(7,0, KEUMBEE34K_STATUS,1);  
        	break;
        
        case MODEL_INVERTER_WILLINGSMBUS_B5 :     //61
		    put_str(3,16,INV_WILLINGSMBUS,2);    
		    put_strf(7,0, WILLINGSMBUS_STATUS_B5,1);  
        	break;      
            
//	        case MODEL_INVERTER_SUNGROWCX:		//63
//			    put_str(3,16,INV_SUNGROW,2);    
//			    put_strf(7,0, SUNGROWCX_STATUS,1);  
//	        	break;  
//	            
//	        case MODEL_INVERTER_ABB100K:		//65
//			    put_str(3,16,INV_ABB100K,2);    
//			    put_strf(7,0, ABB100K_STATUS,1);  
//	        	break;
//	            
//	        case MODEL_INVERTER_CHINTPOWER1M:		//63
//			    put_str(3,16,INV_CHINTPOWER1M,2);    
//			    put_strf(7,0, CHINTPOWER1M_STATUS,1);  
//	        	break;
//	            
//	        case MODEL_INVERTER_KSTAR500K:		//63
//			    put_str(3,16,INV_KSTAR500K,2);    
//			    put_strf(7,0, KSTAR500K_STATUS,1);  
//	        	break;
//	        
//	        case MODEL_INVERTER_SOLAREDGE25K:
//	            put_str(3,16,INV_SOLAREDGE25K,2);    
//			    put_strf(7,0, SOLAREDGE25K_STATUS,1);
//	            break;
//	            
//	        case MODEL_INVERTER_GOODWE50K:
//	            put_str(3,16,INV_GOODWE50K,2);
//	            put_strf(7,0, GOODWE50K_STATUS,1);  
//	        	break; 
//	            
//	        case MODEL_INVERTER_LS1M:		//17
//			    put_str(3,16,INV_LSIS,2); 
//			    put_strf(7,0, LS1M_STATUS,1);
//	            break;
//	            
//	        case MODEL_INVERTER_KPAM: 
//	            put_str(3,16,INV_KPAM300,2); 
//			    put_strf(7,0, KPAM300_STATUS,1);
//	            break; 
//	            
//	        case MODEL_INVERTER_HYMODBUS500K3:      //47
//	            put_str(3,16,INV_HYMODBUS1M,2);
//	            put_strf(7,0, HM_STATUS500K3,1);  
//	        	break;  
//	            
//	        case MODEL_INVERTER_HYMODBUS500K1:      //47
//	            put_str(3,16,INV_HYMODBUS1M,2);
//	            put_strf(7,0, HM_STATUS500K1,1);  
//	        	break;     
//	                   
//	        case MODEL_INVERTER_SUNWAY100K:      //47
//	            put_str(3,16,INV_SUNWAY100K,2);
//	            put_strf(7,0, SUNWAY100K_STATUS,1);  
//	        	break;
//	            
//	        case MODEL_INVERTER_QCELL100K:      //47
//	            put_str(3,16,INV_QCELL100K,2);
//	            put_strf(7,0, QCELL100K_STATUS,1);  
//	        	break;
//	        case MODEL_INVERTER_QCELLMIX:      //47
//	            put_str(3,16,INV_QCELL100K,2);
//	            put_strf(7,0, QCELLMIX_STATUS,1);  
//	        	break;  
            
        case 0xFF:
		    put_strf(3,16,INV_BLINK,2);    
		    put_strf(7,0, BLINK,1);  
        	break;    
		default:
			break;
    }     
}





